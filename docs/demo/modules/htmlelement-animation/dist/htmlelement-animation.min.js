(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define([], factory);
  } else if (typeof exports !== "undefined") {
    factory();
  } else {
    var mod = {
      exports: {}
    };
    factory();
    global.htmlex = mod.exports;
  }
})(this, function () {
  "use strict";

  HTMLElement.prototype.animateCss = function (animationName, callback) {
    var animationEnd = function animationEnd(el) {
      var animations = {
        animation: "animationend",
        OAnimation: "oAnimationEnd",
        MozAnimation: "mozAnimationEnd",
        WebkitAnimation: "webkitAnimationEnd"
      };

      for (var t in animations) {
        if (el.style[t] !== undefined) {
          return animations[t];
        }
      }
    };

    this.addClass("animated " + animationName).one(animationEnd, function () {
      debugger;
      this.removeClass("animated " + animationName);

      if (typeof callback === "function") {
        callback();
      }
    });
  };
  if (!HTMLElement.prototype.one) {
    HTMLElement.prototype.one = function (evtNames, fn) {
      var _this = this;

      var evts = evtNames.split(" ");
      var cb = fn;

      var _loop = function _loop(i) {
        var evt = evts[i];
        if (_this.addEventListener) {
          if (!!document.documentMode) {
            self = _this;

            fn.removed = false;

            _oneCall = function oneCall() {
              if (!fn.removed) {
                fn(event);
                fn.removed = true;
              }
              self.off(evt, _oneCall);
            };

            cb = _oneCall;
          }
          _this.addEventListener(evt, fn, { once: true });
        } else if (_this.attachEvent) {
          _this.attachEvent("on" + evt, fn);
        }
      };

      for (var i = 0; i < evts.length; i++) {
        var self;

        var _oneCall;

        _loop(i);
      }
    };
  }
});